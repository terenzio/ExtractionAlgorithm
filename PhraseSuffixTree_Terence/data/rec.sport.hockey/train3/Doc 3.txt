This is the author's version of an article that has been published in this journal. Changes were made to this version by the publisher prior to publication. The final version of record is available at http://dx.doi.org/10.1109/TSC.2014.2310213
3

Partner Link Handler

Fig. 2. The system architecture of the heterogeneous service composition framework

The adapters and transformers will be further elaborated in the sections 3.2, 3.3, 3.4 and 3.5. The entry point of the BPEL engine is Composite Service Activator component with inputs of WSDL and BPEL documents. Deploy component deploys the documents with BPEL properties and uses Service Generator component to transform the BPEL process defined in the BPEL document into Java classes. Reader component is in charge of generating a BPEL model by analyzing the WSDL and BPEL documents and instantiating the Java class. BPEL Manager component starts the BPEL process by creating a BPEL process instance from the BPEL model with instances of the Java classes. BPEL Runtime component runs BPEL processes at run time. A BPEL process consists of two kinds of activities: basic and structured. A basic activity describes elemental steps of the process behavior. A structured activity encodes control-flow logic and can contain other basic or structured activities recursively. Thread Manager component handles the multi-threads based on XPath and XQuery. SOAP, RESTful, and OSGi Adapters are responsible for invoking SOAP, RESTful, and OSGi services, respectively. The three adapters implement the Partner Link Handler interface, which enables the BPEL engine to delegate service invocation behaviors to the services. Mobile Applications Transformer transforms Android APKs into OSGi services, and Web Content Asset Transformer transforms web contents into OSGi services. Our BPEL engine, complied with BPEL version 2.0, is implemented in Java with 44 packages, 426 classes, 3750 methods and a total of 93609 lines of code. The adapters and transformers are implemented with 11 packages, 105 classes, 461 methods, and 6453 lines of code.

3.1 Experimental Scenario In this work, a smart living control system with a number of heterogeneous services is developed as the experimental environment for comparing our proposed approach with the traditional approach. The system obtains sensor data in order to calculate the predicted mean vote (PMV) indicator for temperature, humidity, illuminance, etc. The PMV system is supplemented with HVAC (heating, ventilation, and air conditioning) technology, lighting, and motorized roller blinds to provide an energy-saving living environment. We develop two smart living system scenarios by adopting the traditional approach and the proposed approach (see Figure 3 and Figure 4). In the traditional approach (Figure 3), RESTful services and Web contents are wrapped as SOAP services and deployed in the server side. As for the Android activity running on Android platform, they can not be directly invoked by the BPEL engine. Hence, a SOAP service is required as a proxy for retrieving the data generated from the activity. The steps of composing the services are as follows: 1) Steps 1-3: The web information about current weather information including temperature, humidity, sunlight, and illumination of the area are retrieved through an Android activity. After that, the activity sends the weather data to a SOAP service. The BPEL engine will retrieve the data through invoking the SOAP service. 2) Step 4: The BPEL engine sends the weather data to the calculated PMV SOAP service. Based on the temperature, humidity, and illumination value, the optimal parameter values for the HVAC technology, lighting, and motorized roller blinds will be determined and returned to the BPEL engine. 3) Steps 5-7: The RESTful services of Motorized roller

Copyright (c) 2014 IEEE. Personal use is permitted. For any other purposes, permission must be obtained from the IEEE by emailing pubs-permissions@ieee.org.

