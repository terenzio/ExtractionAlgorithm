714

LEE ET AL.

behavior in sequence diagrams with interaction operators in Section 3. In Section 4, the aspectual behavior of aspectual use cases is further elaborated using the notion of extended state-based join point model (ESJPM). To demonstrate the enhancement of the sequence diagrams with early aspects, a case study is elaborated in Section 5. Finally, we conclude by outlining beneﬁts of the proposed approach and our future research plan in Section 6. 2. RELATED WORK The following text is extracted from a paper written in 200512 to elucidate the aims of aspect-oriented software development (AOSD).
Aspect-oriented software development is emerging as an important new approach to software engineering. It sprang forth from a rethinking of the relationship between modularization and the long-honored principle of separation of concerns. Any separation-of-concerns criterion will lead to a different partitioning.

The AOSD provides an explicit and systematic means to identify, represent, and weave concerns that tend to crosscut other concerns which maybe artifacts elements in the requirements phase or system components in the design or implementation phase. At the beginning, work in early aspects focused on the identiﬁcation of these concerns among system requirements. Recent work has tried to represent the interactions between aspectual and nonaspectual behaviors. In particular, most of these efforts have concentrated on the issues of how to model aspectual behaviors as well as how to specify the weaving courses between aspectual and nonaspectual behaviors explicitly. As a result, there is an increasing attention on the research of providing a suitable representation for join points that specify where or when to compose the separated concerns with the rest13-17 and giving a concise manner to model how aspectual and nonaspectual behaviors to be composed so that they can be simulated as a whole,14,15,18-20 which are outlined below. 2.1. Join Point Model The join point model (JPM)21 that is implemented in an aspect-oriented programming language dictates when and where the crosscutting modularization takes place. The join point represents the key concept in aspect orientation. Specifying a set of join points is a major task for aspect-oriented designers, and effectively representing join points is a critical task in any aspect-oriented approach to evaluating the interactions of aspects throughout the software development life cycle. For years, many works have sought to elucidate and apply the concept of JPM in the early stage of software development in the hope that important stakeholder's concerns could be better addressed in the requirements analysis and design phases. Deubler et al.13 employed the AspectJ deﬁnition and nomenclature for join points, which are well-deﬁned, single points in the execution ﬂow, where two concerned models are connected with each other. Join points specify when a weaving activity of a crosscutting concern should be executed. Crosscutting concerns arise under four conditions (before, after, around, and instead of a certain action).
International Journal of Intelligent Systems DOI 10.1002/int

