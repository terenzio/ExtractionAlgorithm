586

IEEE TRANSACTIONS ON SOFTWARE ENGINEERING,

VOL. 40,

NO. 6,

JUNE 2014

model is developed upon the benefit of use case modeling to address the interactions among goals and use cases to provide valuable information in identifying, organizing and justifying software requirements, and are served as a background knowledge for the discovery of early aspects in this work.

2.1

Formulation: Goal Identification and Formulation Goals identification plays a pivotal role in the elicitation of software requirements. In [30], C. Rolland et al. proposed a goal structure to analyze the requirements based on a verb and its parameters. To better capture users' intention of a system, an extension to the goal structure [31] is used to make easy the capturing of software requirements. The extended goal structure is developed with two features: (1) classify a verb from two viewpoints: content and competence, to distinguish different types of requirements based on the notion of requirements satisfiability, that is, a requirement that needs to be satisfied utterly or can be satisfied to a certain degree; and (2) add two new types of parameters: view and constraints, to offer separate views in the analysis of the requirements. In the extended goal structure, a goal is expressed as a clause with a verb and a number of parameters, where each parameter plays a different role with respect to the verb. To be more specific, the verb used in a requirements document pinpoints a way that helps developers identify the types of the goals. For example, in a requirements document, if it states "Initiator plans a meeting with date and location by asking participants." A goal can then be identified by using its verb "plan" to depict that the system should provide a function for an initiator to plan a meeting. In terms of the parameters, there are four types in the extended goal structure: view, target, direction, and constraints. The view concerns whether a goal is actor-specific or system-specific. An actor-specific view is an objective of an external entity that uses a system, meanwhile, a system-specific view is a requirement for the services that a system provides. Target is an entity affected by a goal and can be further distinguished into two types: object and results. An object is supposed to exist before a goal is achieved. Results can be of two kinds: (1) entities that do not exist before a goal is achieved, or (2) abstract entities that exist but are made concrete as a result of achieving a goal. The two types of directions: source and destination, identify the direction of the action, which is to or from the objects to be communicated with, respectively. Constraints represent the pre-/postcondition that must be satisfied before or after achieving a goal or Invariant that stands for conditions that always hold before and after achieving a goal. A goal is thus represented as follows:
Action: [Actor, Target, Source, Destination, Condition, Competence]. Action is the verb from requirements documents that a goal intends to achieve, which could be either functional or non-functional. Actor represents view and refers to people who use this system or the system itself that performs the action. Target is an entity affected by the goal. Source, destination, and condition are optional. Source and destination are

both related to direction to indicate the initial and final locations of objects. Condition represents the constraints and serves two purposes: to describe the situation prior to or after performing an action and the invariant that the system must keep before and after performing the action. Competence can be either rigid or soft to show whether the goal must be satisfied utterly or to some extent. In the meeting scheduler system, 15 goals are identified by applying the extended goal structure below: GMP : Plan: [initiator, meeting date and location, initiator, participants, ;, rigid]  GMR : Replan: [initiator, meeting date and location, initiator, participants, support flexibility, soft]  GSF : Support: [system, conflicts resolution, initiator, participants, support flexibility, soft]  GMI : Manage: [system, interactions, participants, participants, as small as possible, soft]  GMHP : Handle: [system, plan meetings, initiator, ;, in parallel, rigid]  GDRH : Accommodate: [system, decentralized requests, initiator, ;, been authorized, rigid]  GKPC : Maintain: [system, physical constraints, ;, ;, not to be broken, soft]  GAP : Provide: [system, performance, ;, ;, an appropriate level, soft]  GRM : Register: [participant, a meeting, participant,;, ;, rigid]  GDP : Delegate: [participant, participation, participant, participants, ;, rigid]  GAED : Accommodate: [participant, evolving data, participant, ;, ;, soft]  GWM : Withdraw: [participant, the meeting, participant, ;, ;, soft]  GEPR : Enforce: [system, privacy rules, participants, ;, ;, soft]  GSR : Support: [system, reusability, ;, ;, ;, soft]  GMU : Maximize: [system, usability, ;, ;, non-experts, soft] It is noted that not all verbs in a requirements document are identified as goals. The extended goal structure is provided as a guideline to assist developers to capture software requirements based on verbs in the requirements document. It is up to the developers to identify verbs as goals directly from the requirements document or to paraphrase the requirements document for identifying goals. 

2.2 Construction: Goal-Driven Use Case Diagram After goals are identified, a goal-driven use case diagram can then be established. In the goal-driven use case approach [24], each use case is viewed as a process that can be associated with a goal to be achieved, optimized, or maintained by the use cases. To start with, original use cases guaranteeing that a target system meets the minimum requirements are first addressed. Each original use case is associated with an actor to describe the process to achieve an original goal that is rigid, actor-specific, and functional. Building original use cases by investigating all original goals makes the use case model satisfy at least all actors' rigid goals. To extend the original use cases to take into

