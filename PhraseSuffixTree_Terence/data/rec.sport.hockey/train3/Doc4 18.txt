ASPECT-ENHANCED GOAL-DRIVEN SEQUENCE DIAGRAM

729

introduced to the aspectual sequence diagram to specify the weaving semantics by depicting which weaving operator to be applied. The aspect weaver can be realized by a weaving utility facilitating aspectual behavior weaving. Referring to Figure 5 again, the three roles involved in this sequence diagram are replanAMeeting, weaver, and handleﬂexibility. The replanAMeeting role represents a set of objects in the "replan a meeting" base use case. These objects cooperate with each other to achieve the goal GMR associated with replanning a meeting. The handleﬂexibility role represents a set of objects that are meant to be woven into the base use case to address the ﬂexibility handling concerns. The weaving activities are conducted by executing the trace of the message ﬂow of the weaver as follows:
1. The weaver sends an inquiry to handleﬂexibility to obtain information needed for performing weaving operation, including join points, aspectual behavior. 2. The weaver performs a series of inspections on the states of objects associated with the base use case to locate appropriate weaving points. The notion of appropriateness is meant to describe a situation that the states of objects match the conditions described in the join point acquired from handleﬂexibility. 3. Once the condition is satisﬁed, the insert weaving operator is applied to weave the aspectual behavior into the sequence diagrams of the base use cases.

A state transition diagram of the ﬂexibility handling is shown in Figure 7. When the event of "replan" occurs, the state transits from "inspection" to "allow to set preferences." The weaving operator "insert," in this case, is applied to the objects being inspected when the state is entered. Aspectual behavior described in the state is then being woven into the base object. Furthermore, if another event, say "notifyTheScheduledMeeting," occurs, the state will transit from "allow to set preferences" to "allow to accommodate an important meeting" for weaving additional concerns to the base objects. Otherwise, it will return to "inspection" state for weaving other aspects when appropriate events arrive. The sequence diagram of the base use case UCReplanaMeeting is shown in Figure 10. To weave the aspect AspectSF represented in sequence diagrams (see Figure 5) and state machine (see Figure 7), the proposed interaction operators, insertPar and insert, are applied and realized by the weaver. The weaver performs a concurrent insertion activity to recursively inspect the state of the meeting object instance. When the trigger condition, caused by a state transition, of a join point is satisﬁed, the aspectual behavior of the aspect is woven into the base behavior by the weaver in Figure 11. 6. CONCLUDING REMARKS Aspect-oriented software development is emerging as an important approach to software engineering. It provides explicit means to model important stakeholders' concerns that tend to crosscut multiple system components. The early identiﬁcation of concerns helps develop untangled and nonscattered design and code, which reduces the cost of implementation and enhances maintainability.
International Journal of Intelligent Systems DOI 10.1002/int

