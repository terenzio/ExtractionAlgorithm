208

International Journal of Fuzzy Systems, Vol. 7, No. 4, December 2005

SAM-ASDL specification.

referred by the BusinessService entry. Other related sub-parts, like InstructionURL and WebURL, are described in KeyedReference instances of InstructionURL_tModel and WebURL_tModel, respectively. 4.5 UDDI Browser So far, the core technologies and components that are employed to build a service matchmaker for the proposed MAS called SAM are introduced. This service matchmaker tackles the semantic and uncertain issues for matching services well. However, it will also need to develop a convent user interface for users to searching services beyond the extent of MASs. The newly elaborated component, called UDDI Browser, is an UDDI registry independent searching tool that extends the basic query scenarios described in the UDDI specification by incorporating with the translator mechanisms introduced in section 4.4.

Figure 11. Represente a Condition of a Hotel Reservation Servic

In figure 11, we illustrate a condition of the hotel reservation service agent with the newly-defined tModels. In this example, three tModels, included CondtionVariable_tModel, hasValue_tModel, and conditionType_tModel, are referred. The semantics are inserted as the values of the KeyValue property of the KeyedReference instances that depict a condition restricting the room type provided to be a single. We use the XML namespaces to introduce for convenient. In practice, these namespaces should be replaced by the URIs that the concepts belonged to. The SAM-ASDL translator then utilizes these tModels created, the data model structure described in UDDI specification, and WSDL documents referred to translate a UDDI service entry into an SAM-ASDL document stored in the middle agent. This mechanism helps the middle agent to handle the semantics well when performing service matchmaking based on these tModels defined. After publishing a service by embedding SAM-ASDL related information in UDDI registry, we describe the detail process handled by the ASDL translator. First, we create the Profile portion of a SAM-ASDL document for a service. An instance of Provider concept is constructed by mapping from the BusinessEntity. The name of the service and its general descriptions are then created by gathering the data of the BusinessService. Input and output variables can be derived from the KeyedReference instances of InputVariable_tModel and OutputVariable_tModel, or from the message data elements defined in the WSDL documents referred. Conditions are built upon the KeyedReference instances of related tModels, included ConditionVariable_tModel, hasValue_tModel, and conditionType_tModel, representing the various conditions. The other information in the Profile is given the default value as defined in SAM-ASDL specification by the ASDL translator. Finally, the making of the Grounding portion of a SAM-ASDL is simplified to create an instance of the WSDLGrounding concept. The values of the WsdlURL property are the URLs of WSDL documents

Figure 12. Layered Architecture of UDDI Browser

Figure 12 is the layered architecture of UDDI Browser. There are four parts made up the UDDI Browser mainly. The part at the bottom of the layered architecture is the Standard UDDI Application Interface. It provides all functionalities need to manipulate a targeted standard UDDI registry which is publicly accessible via Internet. These functionalities comply with the interfaces, which are RPC-based methods for communicating through SOAP [5] over HTTP, specified in the UDDI Speciation [4]. WSDL2UDDI Translator lies on the Standard UDDI Application Interface and implements the best practice [23] proposed by OASIS organization, which is the maintainer of UDDI Specification, to provide a recommended approach to mapping WSDL [8]

