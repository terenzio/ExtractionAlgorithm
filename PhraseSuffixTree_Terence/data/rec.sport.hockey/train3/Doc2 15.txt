598

IEEE TRANSACTIONS ON SOFTWARE ENGINEERING,

VOL. 40,

NO. 6,

JUNE 2014

candidates with GEA and without GEA when the threshold for determining early aspectual candidates in GEA is set to 60 percent or higher. However, there is no statistical difference between the numbers of early aspectual candidates found by people with the help of GEA. As a result of the experiment, we show that the difference between with GEA and without GEA is statistically significant.

5

RELATED WORK

In what follows, we outline three dimensions of related work on aspect-oriented software engineering that have shed some light on this work: the first is researches on early aspects [1], [2], [32], [38], [39], [40], [41], the second is work on the relationships between early aspect and use cases [33], [42], [43], [44], and the final one is work that focuses on relationships between crosscutting concerns [9], [16], [45], [46].

5.1 Early Aspects Aspects are behaviors that are tangled and scattered across a system [38]. In requirements documents, aspects may reveal themselves as interleaving and interdependent behaviors. Some aspects may be easily identified, as specifications of typical crosscutting behavior, while others may be more subtle and difficult to discover. Many recent studies have attempted to identify and apply the concept of aspects to the early stage of software development, called early aspects, in the hope of better addressing important stakeholders' concerns in the requirements analysis and design phases. Elisa Baniassad et al. [1] emphasize the importance of identifying and managing requirements-level and architecture-level aspects instead of merely focusing on the implementation phase in the software life cycle. In their work, early aspects are identified and captured explicitly in requirements and architecture activities, and carried over the entire software development life cycle. Theme-based approaches [38] assume that two behaviors are related if they occur in the same requirement. Themes are classified as base themes or crosscutting themes. Base themes may share some structures and behaviors with other base themes. Crosscutting themes have behaviors that overlay the functionality of the base themes and are treated as aspects. The disadvantage of theme-based approaches is the excessive effort required in grouping the actions into larger themes and identifying aspects. AORE [2] identifies candidate aspects by representing the relationships between concerns and stakeholder requirements in a contribution matrix based on the negative or positive effects of each aspect on others. Conflicts with stakeholders are resolved by prioritizing concerns. The requirements specification is then revised based on the new priorities. Early-AIM [39] adopts corpus-based natural language processing techniques to help automate the identification and modeling of early aspects in a requirements document. The main aim of Early-AIM is to discern the candidate aspects in a document, irrespective of the document structure. EA-Miner [47] is the realization of this concept and offers automated support for identifying and visualizing early aspects from various requirements-related documents.

Aspect-oriented Multi-View Modeling [48] proposes to model a software from multi-views by utilizing various notations, such as class diagrams, sequence diagrams, and state diagrams. By using the reusable aspect models, it can support aspect dependency chains, which allows an aspect for providing complex functionality to reuse the functionality provided by other aspects. However, the focus of the work is on reusing existing aspects not on discovering new aspects. ACE [32] seeks to identify crosscutting concerns through the application of automated clustering techniques. It utilizes a probabilistic model to compute the similarities between different requirements and uses a hierarchical algorithm to cluster similar requirements. Concerns represented by dominant terms were detected during an initial clustering phase, while those represented by less dominant terms were detected by removing away the dominant terms from requirements in subsequent phases. Generated clusters, candidate early aspects, where evaluated using metrics to measure their physical dispersion across the requirements specification and their level of interaction with other dominant concerns. Although ACE addresses the early aspect identification by means of clustering, it is still impeded by the following two problems: one is that the early aspect candidates found in the final clusters have a coherent and imprecise problem, namely, the result clusters may still contain a few unwanted or unrelated requirements; and the other is that a same concern addressed by various requirements may be overlooked due to the expression of the concern by different terms which may impact the similarities of requirements, which is addressed in [49] by Kit et al. with latent semantics analysis. Table 7 summaries the works on early aspects. The main limitation of the above-mentioned related work of early aspects is that early aspects are mainly identified based on keywords across the whole system requirements or artifacts, which could hinder developers from focusing on major system functionalities since the identification of early aspects is accomplished by finding crosscutting concerns across the whole target system, and could possibly change the main course of the system construction. The theory we proposed makes easy the identification of early aspects through a numerical manner by computing the similarity of goals and by checking the validity of the formation of a goal cluster with the total interaction degree.

5.2 Use Cases with Early Aspects Many researchers have adopted use cases in requirements specification, analysis and design, and have attempted to adopt them as test beds for introducing early aspects into the requirements phase. Sousa et al. [42] propose modeling crosscutting concerns as use cases, and presented a new relationship between use cases, called (crosscut ). Information about the composition between a crosscutting use case and the use cases that it affects is described in a composition table that enables the join points to be defined, instead of in the base use case. The composition between an extension and a base use case can be fully non-invasive. A heuristic rule is provided to determine when to connect two use cases via a crosscutting relationship.

