ASPECT-ENHANCED GOAL-DRIVEN SEQUENCE DIAGRAM

715

Therefore, graphical elements are introduced into the uniﬁed modeling language (UML) sequence diagrams to specify when an aspect is invoked--before, after, wrapping, and overriding join points. A join point is represented as a lifeline with a circle head symbol to specify the interaction of aspectual and base behaviors with messages passing between the join point and system instances. The drawback of this approach is that it cannot model the join point as a concrete instance with a lifeline. Since join points are associated with different semantics, and the time ordering imposed in the lifeline is disturbed and chaotic. Stein et al.14,15 speciﬁed ﬁxed code-based behavioral join points in the UML sequence diagrams. Their work adhered strongly to the semantics of the AspectJ program language, and they attempted to model the execution of program at a high level of abstraction. They argued that behavioral crosscutting takes place at the link that is used to communicate the message (which is the stimulus that dispatches the action associated with the message.) By utilizing links as ﬁxed points for behavioral crosscutting, this work will specify the join points where crosscutting occurs in the UML sequence diagrams with some stereotypes, such as execute, nitialize, create, set, and set. However, the deﬁciency of ﬁxed code based behavior join points is that those join points triggered not depending on speciﬁc actions but speciﬁc system state transitions are difﬁcult to represent. Boucke and Holvoet16 pointed out the need for high-level join points to solve the problems in capturing abstract system states that are encountered in the development of an application to control automatic guided vehicles in a warehouse management system. They argued that abstract states of software entities (a concern consists of software entities) are a promising instrument for deﬁning join points for crosscutting concerns rather than ﬁxed points in program execution. However, this work represents only a preliminary attempt at state-based join points modeling. It outlines a UML class diagram corresponding to a concern and the software entities, which makeup the concerns. In the initial sketch of state-based join points, they considered the use of an event-based approach to model the speciﬁed statebased join points. However, the semantics of crosscutting concerns and join points are informally presented in UML notes. The dynamic behavior of aspectual and nonaspectual behavior cannot be represented. Noorazean Mohd Ali17 proposed a state-based join point model (SJPM) that was motivated by the deﬁciencies of existing ﬁxed code-based behavioral JPMs when used to support the implementation of crosscutting concerns in systems that need constant state monitoring such as the safety-critical systems. To ﬁnd ways to capture the crosscutting behaviors that are activated by some system state transitions, SJPM deﬁnes a crosscutting system state as an abstract state machine and uses the transitions of this abstract state machine to identify the join points for aspect superimposition. This work speciﬁes three types of state-based join point in the SJPM: They are dependency based, scope based, and transition ﬂow join points, and they provide the foundation for state-based aspect implementation. The major disadvantage of this approach is the lack of a visual means of representing the interactions between aspectual and nonaspectual behaviors. A state machine diagram cannot easily be used to represent how aspectual behaviors are imposed on these system behaviors that they crosscut.
International Journal of Intelligent Systems DOI 10.1002/int

