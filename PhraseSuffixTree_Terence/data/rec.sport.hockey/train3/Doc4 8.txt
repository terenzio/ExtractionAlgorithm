ASPECT-ENHANCED GOAL-DRIVEN SEQUENCE DIAGRAM

719

∑ Woven base use cases: A set of use cases that an aspectual use case crosscuts. Unlike extend or include, an aspectual use case can crosscut more than one base use case. ∑ Join points: Join points describe when and where the corresponding aspectual behavior would weave into base use cases that an aspect crosscuts. In addition, the description of join points is speciﬁed in the aspectual use case speciﬁcation instead of in a base use case speciﬁcation. ∑ Types of weaving operators: There are three categories of weaving operators in the proposed approach. Through the use of weaving operators, the system analyst can explicitly specify the kind of weaving operation to be performed by an aspectual use case and the effects to base use cases. The three categories of weaving operators are "insert behavior," "replace behavior," and "impose constraints" which is further elaborated as follows: 1. Insert behavior includes two weaving operators, WeaveOPinsert and WeaveOPinsertPar . WeaveOPinsert operator is applied when the woven aspect owns the control of executing the base use case till the end of performing the aspectual behavior. In contrast to WeaveOPinsert , WeaveOPinsertPar does not interfere with the control ﬂow of the base behavior, the aspectual behavior will be executed in parallel with the woven behavior. 2. Replace behavior has only one weaving operator, named WeaveOPreplace . It is applicable only when aspectual behavior is used to replace the base behavior at a given join point. 3. Impose constraints include three weaving operators, namely, WeaveOPIDC , WeaveOPITC , and WeaveOPISI . WeaveOPIDC is applied when an aspect imposes a duration constraint on the execution of base behavior. WeaveOPITC is used when an aspect imposes a timing constraint on the based behavior. And WeaveOPISI is used to introduce and maintain an invariant state described by an aspect to the base use case's behavior.

3.2. Aspectual Sequence Diagram The UML interaction diagrams are intended to model the dynamic behaviors of a system. A sequence diagram is one of the interaction diagrams, which emphasizes the time line of messages dispatched among a set of object instances. It is also the most direct and intuitive way to describe how a group of objects interact with each other. The proposed extension to UML sequence diagrams is to specify the weaving operations by introducing weaving operators performed by a weaver object instance to incorporate aspectual behavior into object instances in the base sequence diagram in three sorts of weaving ways, such as behavior insertion, modiﬁcation, or constraints imposition effects. The focus of the proposed extension to the sequence diagrams is twofold: (1) to express the weaving semantics by modeling what and how the notion of aspectual behavior can be interleaved into the sequence of event occurrences that are deﬁned in the woven use case speciﬁcation and (2) to specify the join points by modeling where the aspectual behavior will be interleaved into those behavior deﬁned in the woven sequence diagrams. 3.2.1. Extend Weaving Semantics with Interaction Operators In the UML,25,26 a sequence diagram describes a set of possible traces of message passing among objects that are bound to the interaction speciﬁcation. Interactions include a number of constructs called combined fragments for representing
International Journal of Intelligent Systems DOI 10.1002/int

