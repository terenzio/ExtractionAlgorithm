716

LEE ET AL.

Some ﬁndings considering the aforementioned approaches are summarized as follows: (1) In some work, join points are speciﬁed intuitively by marking the woven actions in UML sequence diagrams, which cannot be easily applied to state-sensitive systems. (2) Support for specifying the semantics of how, where, and when aspectual behaviors occur is rather limited. 2.2. Modeling Aspectual Behavior Stein et al.14,15 proposed a design model, called the aspect-oriented design model (AODM), that extends existing UML concepts to aspect-oriented concepts, which are found in AspectJ. Aspects are represented as the UML classes of a special stereotype called aspect. Analogous to aspects in AspectJ, the "pointcut" elements and "advice" operation can be deﬁned as operations in the aspect class with pointcut and advice stereotypes, respectively. In the AODM, crosscutting of the behavior of a program (implemented by means of advice in AspectJ) is visualized by highlighting messages in a UML sequence diagram. Behavioral crosscutting takes place at the link that is used to communicate the message. The crosscutting behavior is speciﬁed by standard UML collaborations. Weaving of behavioral crosscutting is considered to be a matter of splitting and composing collaborations. Splitting always takes place in the collaboration describing the crosscut behavior, at the link at which the crosscutting behavior is to be executed. A new collaboration, which implements the crosscutting behavior, is composed to the split collaboration before or after (or "around") the link at which the collaboration was split. However, the work inherits the deﬁciency of ﬁxed code-based behavior join points, which is mentioned in Section 2.1. Ar¥ ujo et al.18,19 introduced the notion of aspect in scenario-based software rea quirement research. They focused on representing aspects during use case modeling. In particular, they focused on how to compose aspectual and nonaspectual scenarios in a way that enabled them to be simulated as a whole. They modeled nonaspectual scenarios using UML sequence diagrams. Aspectual scenarios are modeled as interaction pattern speciﬁcations (IPSs).22 Finite state machines will be modeled as UML state machines and an aspectual ﬁnite state machine will be modeled as state machine pattern speciﬁcations (SMPSs).23 The aspectual and nonaspectual state machines are then composed using a state machine synthesis algorithm. The result is a new set of state machines representing the complete speciﬁcation. A state-based approach is used to merge aspectual and nonaspectual scenarios, each of which is translated into a set of state machines, which are combined to generate a complete validated state machine description of the system requirements. The notion of join points is implicit in the synthesis algorithm. How the aspectual scenarios crosscut nonaspectual scenarios is not explicitly modeled in sequence diagrams. Georg et al.20 proposed an aspect-oriented design approach that deﬁnes an aspect using role models based on two aspect views--static and interaction views. An aspect's static view leverages UML class diagrams to deﬁne the structural properties of the aspect. The interaction view utilizes UML collaboration diagrams to specify the interaction patterns that are associated with the aspect. Aspects are treated as design patterns and modeled by the role models. However, only instantiation for
International Journal of Intelligent Systems DOI 10.1002/int

