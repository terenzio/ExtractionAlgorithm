LEE AND HSU: GEA: A GOAL-DRIVEN APPROACH TO DISCOVERING EARLY ASPECTS

585

Fig. 1. Goal-driven early aspect process.

interaction degree for checking the validity of the formation of each cluster grouped. Through the use of numerical representation of relationships between goals and use cases, the relationships among goals can be more easily processed computationally. 3) To ease up the discovery of early aspects in the early stage of software development, an ArgoUML-based supporting tool is developed and integrated with MapReduce and HBase as a means to improve the performance of the proposed clustering algorithm. Adopting MapReduce enhances the clustering algorithm by executing grouping procedures concurrently. Using HBase helps manage the storage of intermediate data and final results generated by Mappers during the grouping of goals. There are four phases in the Goal-driven Early Aspect process (see Fig. 1): formulation, construction, classification, and identification, to facilitate the discovery of early aspects. In formulation, requirements are analyzed in order to identify and formulate goals based on the concept of goal structure. In construction, a goal-driven use case model is established together with scenarios of use cases, side effects and a table of relationships among goals and use cases. Noted that a more fine-grained goal-driven use case model is obtained in an iterative manner. In classification, relationships between goals and use cases are evaluated. Our ArgoUML-based supporting tool generates the following artifacts: similarity degrees, interaction degrees, goal clusters, and the frequency of occurrence of goal clusters. Finally, in identification, a threshold is set for determining which of these goal clusters will be treated as early aspectual candidates, and to be identified as early aspects by a 4-step guideline suggested in the proposed approach. As pointed out in [26], using a benchmark helps examine the research contribution rigorously, and improve the tools and technique being developed. In this work, the meeting scheduler system [27] is chosen as an illustrative example throughout this paper to demonstrate the proposed

approach as it has been adopted as a benchmark problem in requirements engineering [28]. In addition to the meeting scheduler system, the proposed approach is also applied to another application domain, a course enrollment system developed at National Central University to further illustrate the feasibility of the proposed approach. An experiment is conducted to evaluate the benefits of the proposed approach by inviting three groups of people, including 15 college professors (P group), 15 graduate students (S group) and 15 software engineers from a software R&D institute in Taiwan (E group), to a survey: P and S groups apply the GEA to the course enrollment system to discover early aspects, while the E group discovers early aspects without using the GEA. The result of the survey is further validated through Mann-Whitney U-test [29] to show that the difference between with GEA and without GEA is statistically significant. In the rest of the paper, we first discuss how to identify goals through the use of an extended goal structure based on our previous work in Section 2. In Section 3, details on how to discover early aspects by goals interactions and the clustering algorithm are fully described. The course enrollment system is illustrated in Section 4 along with an experiment to further illustrate the benefits of the proposed approach. Related work on early aspects are discussed in Section 5. Finally, we conclude by outlining benefits of this work and our future research plan in Section 6.

2

GOAL-DRIVEN USE CASE MODEL

As a starting point to identify early aspects, it is crucial to clarify the relationships among system functional and nonfunctional requirements. Use case driven analysis focuses the expression of requirements on users, beginning with the perspective that a system is built first and foremost for its users, which offers an important benefit that helps manage complexity as it focuses on one specific usage at a time. Our previous work [22], [24], goal-driven use case

