ASPECT-ENHANCED GOAL-DRIVEN SEQUENCE DIAGRAM

717

interaction role models is considered herein. The composition of role models with nonaspectual interactions is not considered. Deubler et al.13 proposed aspect-oriented modeling techniques to model interacting components that are implemented as Web services within service-oriented architectures. A service is deﬁned by the interaction among entities that are involved in establishing a particular functionality. Hence, a service is a behavior or functionality that is provided by collaborative interworking system entities. This work introduces an explicit notation for modeling before, after, around, and instead join points within UML sequence diagrams. The drawback of this approach is that it cannot model a join point as a concrete instance with a lifeline in sequence diagrams. Because join points are associated with different semantics. Some of the ﬁndings associated with the related work are summarized as follows: (1) hard to specify a join point at which the aspectual behavior hinges on a speciﬁc state transition and (2) limited support for specifying explicitly the interactions between aspectual and nonaspectual behaviors. 3. ASPECTUAL BEHAVIORS MODELING In this work, we proposed to augment the use case speciﬁcation with aspectual properties to document the responsibilities of an aspectual use case and model the aspectual behavior in an aspectual sequence diagram to make explicit the inclusion of aspects with an ESJPM for specifying weaving semantics. Early aspects are documented in a use case diagram, which is further enhanced to represent early aspects. An early aspect is denoted as a rounded rectangle, and an associated use case is created to realize the early aspect. A weave stereotype is proposed to model how the notion of early aspects can be integrated into the use case diagram. The tenet of weave stereotype is twofold:
1. To specify that an aspectual use case, which realizes an early aspect, can crosscut many base use cases and 2. To stress that there may exist many join points inside a base use case for corresponding aspectual use cases to be woven in.

Once the enhanced GDUC diagram is obtained, specifying the dynamic behavior of early aspects becomes the main theme in the analysis of software systems. As use cases are often used to identify the dynamic behavior of a software system, it is vital to clarify the difference between how an aspect and a goal are represented in the enhanced GDUC diagram. There are two types of use cases in the diagram: One is base use case that speciﬁes a slice of system functionalities that is visible to actors, and the other is aspectual use case that speciﬁes a part of system functionalities that are interleaved, or crosscut in aspect-oriented research term, with other system functionalities. Consequently, it is important to specify not only how system objects interact to achieve the goal of each base use case, but also how these objects interact to implement the crosscutting concerns of each aspectual use case as well as where the effects take places with respect to the aspectual use case's corresponding base use cases.
International Journal of Intelligent Systems DOI 10.1002/int

