J. Lee et al.: A Possibilistic Petri-Nets-Based Service Matchmaker for Multi-Agent System Architecture

209

descriptions to the UDDI data structures. Any targeted UDDI registry conforms this best practice should register all tModels newly identified in [23] as a basis to perform WSDL driven service searching. Though, WSDL2UDDI Translator can be implemented by parsing all referred WSDL documents by a registered business service entity, this kind of searching infrastructure can significantly decrease the load of the service finder. SAM-ASDL Translator, other hand, provides the same functionalities likes WSDL2UDDI Translator except for SAM-ASDL documents. The mapping of SAM-ASDL to UDDI data structures and additional identified tModels for this mapping are specified in the section 4.4. Finally, User Interface is the front-end interaction interface for users to manipulate the settings of targeted UDDI registries to be searched, to fill in the fields for different searching styles, and to browse the searching results by cooperating with the other underlying parts just introduced. Although UDDI Browser can perform almost tasks relate to service searching, it can't replace the service matchmaker entirely. Issues involved in service matchmaking, including uncertainty, semantic reasoning, quality of service and et al., are much suitable and tackled more effectively in an open and distributed environment than a standalone tool. However, service searching should not be the limitation of the development of UDDI Browser. Service providers also need a convenient way to publish services in a UDDI registry which will be the next direction of development of the UDDI Browser in the future.

guided to fill in requested information, including personal data, check in date, check out date and etc. The personal data may be retrieved through the smart card attached with SAM. He/she can also check the search criteria for the hotel services he/she is interested in, for example, the location of the hotel and the room type. He/she can then send this request to the web server which will convert it into an SAM-ASDL document, and in the meanwhile as a trigger to instantiate a request agent to take in the request form in the SAM-ASDL format. The instantiated request agent brings this SAM-ASDL document to the middle agent for matchmaking.

Figure 13. A Scenario of Requesting for Hotel Reservation Service

5. An ATIS Example: Hotel Reservation Service and Traveling Service
In this section, we give a scenario of advance traveling information system (ATIS): to query for the hotel information, reserve a hotel, and travel to the hotel, as an illustrative example to demonstrate how to publish, request, compose, match, and deliver services in SAM. There are two service domains involved in this scenario. Service gents in the hotel reservation domain provide services for serving hotel by wrapping the web site of each hotel. The composite service agent in the traveling domain composes several simple services, including E-Map, Shortest Path, Route Guidance and Parking Lot information. Let's first consider the scenario of hotel reservation service (see figure 13). To start with, the user inputs a query "hotel reservation" in the SmartAgent bar to query for the service domain. After choosing the specific service domain, the web server generates a request form for the hotel reservation domain by reasoning its related ontologies in this domain. In the request form, the user is

If the user doesn't allow the request agent to act on his/her behalf, the request agent will send the matched results with their matching degrees to the message pool of the web server and wait for the user to pick up a service. After a desired service is clicked, the request agent brings related information to the hotel service agent and makes the reservation. The hotel service agent then accesses the web site of the hotel and preprocesses all the tasks for the user. Finally, a hotel reservation confirmation form is returned to the web server. The user can peruse the incoming message and decide whether to reserve the hotel or not. If a confirmation is made, this information will be sent to the hotel's web site directly. An on-line hotel reservation is thus completed. After reserving a hotel, we further describe the second scenario of requesting for traveling information about the hotel reserved (see figure 14). Again the user queries for the service domain by typing "traveling" and locates the traveling domain. Once again, the web server dynamically generates the request form of the service domain. In this request form, the user fills in the destination by means of voice input, and obtains the current position through the GPS receiver. He/she then picks the information to make shape the query. Again

