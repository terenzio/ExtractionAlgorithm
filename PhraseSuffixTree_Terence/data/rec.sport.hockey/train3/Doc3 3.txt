J. Lee et al.: A Possibilistic Petri-Nets-Based Service Matchmaker for Multi-Agent System Architecture

201

interact with each other: Yellow-pages server performs basic matchmaking among service requesters and service providers based on two weighted hierarchies it maintains - a verb and a noun hierarchy of synonyms - and retrieval algorithms to compute similarities between given service specifications, Registration server for agent registration and maintaining an agent service index used by the yellow-pages server, Type server maintains a hierarchical ontology of standard data types and concepts, and A thesaurus and a human interface allowing a human to access all the above servers in an IMPACT system. Any service provided by an IMPACT agent is specified in an HTML-like service description language. Agents may request services in one of the following forms: (1) k-nearest neighbor request: find the k-nearest service names such that there exists an agent who provides that service and identify this agent, and (2) d-range search: find all service names within a specified distance d. Therefore the Yellow-pages server identifies agents that provide services similar to a requested service. Similarity is computed through two technical means - through a certain kind of "k-nearest neighbor" search in a metric space, and through certain "range" queries in a metric space. InfoSleuth [22] is an agent-based system for information discovery and retrieval in a dynamic, open environment such as the World Wild Web. It has been developed by MCC Inc. in Austin, Texas, USA. The InfoSleuth system consists of a set of collaborating agents that work together, and focuses on: gathering information via complex queries from a changing set of databases distributed across an internet, performing polling and notification for monitoring changes in data, and analyzing gathered information using statistical data mining techniques and/or logical inferencing. The InfoSleuth agents are organized as core agents that provide basic information subscription, filtering and fusion capabilities, resource agents that serve as interface to external information resources, and user agents that act as proxies for individual users. The core agents (broker agent, task planning agent, multiresource query agent, data mining agent, ontology agent) represent the set of agents that work together to connect users with the information they need. These agents service requests over a set of common ontologies, accessed via the Ontology agents. The Open Agent Architecture (OAA) [20] , developed and used for several years at SRI International, USA,

provides an agent architecture that can facilitate communication and cooperation between agents by one or more centralized facilitators. OAA uses a PROLOG-based ICL (Interagent Communication Language) for describing agents' needs and capabilities. The language allows service providers to describe the agents in terms of tasks they can perform and not really in terms of resources they represent. Based on ICL, the facilitator agent will make decisions about which agents are available and capable of handling sub-parts of the request, and will manage all agent interactions required to handle the complex query. The facilitator may also provide a global data store to adopt a blackboard style of agent interaction. Furthermore, OAA uses triggers to instantiate commitments within and between agents, and provides a agent library to minimize the effort involved in creating new agents and wrapping legacy applications. DECAF (Distributed Environment Centered Agent Framework) [13], developed by University of Delaware, USA, provides a platform for extremely rapid development of agents, following a well-defined software engineering approach. This is accomplished by building an operating environment that provides an interface, internal agent scheduling and monitoring in a fashion similar to operating system primitives. The agent developer does not need knowledge of any of this structure and can thus focus on development of the agent itself. The basic DECAF architecture has been built using the Java programming language, and a set of Java classes are implemented, such as communication, coordination and reasoning services. DECAF provides programmers with a GUI interface, called Plan-Editor, to model executable actions as basic building blocks which can be chain together in the style of an HTN (hierarchical task network). The output of the Plan-Editor is the plan file, which represents the programming of the agent. One agent consists of a set of capabilities and a collection of actions that may be planned and executed to achieve the objectives. DECAF uses RETSINA-style automated data flow for directing plan execution. Furthermore, DECAF helps in prototyping MAS by providing standardized, domain-independent middle agents, including agent name servers (ANS), matchmakers (yellow pages), brokers (white pages), web proxies, and agent management agents. DECAF also provides some value-added features to the programmers such as ANS registration, behavior libraries to interact with middle-agents. In table 1, we summarize the comparison between MASs with a list of criteria based on the previous examinations. The detail descriptions of these criteria are as follows: Agent Types: The core of an MAS is various

